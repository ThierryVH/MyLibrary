<?php

namespace App\Controller;

use App\Entity\Book;
use App\Entity\Category;
use App\Entity\Image;
use App\Form\BookType;
use App\Form\CategoryType;
use App\Repository\BookRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use App\Repository\UserRepository;
use App\Repository\CategoryRepository;
use Doctrine\Tests\Common\DataFixtures\TestEntity\User;
use Knp\Component\Pager\PaginatorInterface;
use Symfony\Component\HttpFoundation\File\File;

use Symfony\Component\HttpFoundation\File\UploadedFile;


/**
 * @Route("/")
 */
class BookController extends AbstractController
{

    private $bookRepository;
    private $userRepository;
    private $categoryRepository;

    public function __construct(UserRepository $userRepository, BookRepository $bookRepository, CategoryRepository $categoryRepository)
    {
        $this->bookRepository = $bookRepository;
        $this->userRepository = $userRepository;
        $this->categoryRepository = $categoryRepository;
    }
    /**
     * @Route("/book", name="book_index", methods="GET|POST")
     */
    public function index(PaginatorInterface $paginator, Request $request): Response
    {
        $category = new Category();

        $form = $this->createForm(CategoryType::class, $category);
        $form->handleRequest($request);

        $books = $paginator->paginate(
            $this->bookRepository->findAllByPagination($category->getName()), /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            8/*limit per page*/
        );
        return $this->render('book/index.html.twig', [
            'books' => $books,
            'form' => $form->createView()
            // 'categories' => $categories
            ]);
    }

    /**
     * @Route("/", name="index", methods="GET")
     */
    public function redirectToIndex() : Response
    {
        return $this->redirectToRoute('book_index');
    }

    /**
     * @Route("/book/new", name="book_new", methods="GET|POST")
     */
    public function new(Request $request): Response
    {
        $book = new Book();
        $image = new Image();

        $form = $this->createForm(BookType::class, $book);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $em = $this->getDoctrine()->getManager();

            if ($request->files->get('book')['image']['name'] !== null) {
                
                $file = $request->files->get('book')['image']['name'];
                // $alt = $request->request->get('book')['image']['alt'];
                
                // $file = $book->getImage()->getName();
                $alt = $book->getImage()->getAlt();
                
    
                $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
    
    
                try {
                    $file->move(
                        $this->getParameter('images_directory'),
                        $fileName
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }


                $image->setName($fileName);
                $image->setAlt($alt);
    
                $book->setImage($image);

                $em->persist($image);
            } else {
                $book->setImage(null);
            }



            
            $em->persist($book);
            $em->flush();

            $this->addFlash(
                'success',
                'Le livre a bien été ajouté'
            );

            return $this->redirectToRoute('book_index');
        }

        return $this->render('book/new.html.twig', [
            'book' => $book,
            'form' => $form->createView()
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/book/{id}", name="book_show", methods="GET")
     */
    public function show($id): Response
    {

        $book = $this->bookRepository->find($id);
        return $this->render('book/show.html.twig', [
            'book' => $book,
            'users' => $this->userRepository->findAll()
            ]);
    }

    /**
     * @Route("/book/{id}/edit", name="book_edit", methods="GET|POST")
     */
    public function edit(Request $request, Book $book): Response
    {

        $imageExists = false;

        if ($book->getImage()) {
            $imageExists = true;
            $image = $book->getImage();
            $fileName = $image->getName();
            $alt = $image->getAlt();
        } else {
            $image = new Image();
        }

        $form = $this->createForm(BookType::class, $book);

        $form->handleRequest($request);
        
        if ($form->isSubmitted() && $form->isValid()) {
            
            // If file is sent
            if ($form->getData('book')->getImage()->getName() !== "FOO") {

                if ($imageExists) {
                    unlink($this->getParameter('images_directory') . '/' .$fileName);
                }
    
                // We catch the file
                $originalFile = $request->files->get('book')['image']['name'];
                
                $alt = $book->getImage()->getAlt();
    
    
                $fileName = $this->generateUniqueFileName() . '.' . $originalFile->guessExtension();
    
    
                try {
                    $originalFile->move(
                        $this->getParameter('images_directory'),
                        $fileName
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }
    
                $image->setName($fileName);
                $image->setAlt($alt);
                $book->setImage($image);
                $this->getDoctrine()->getManager()->persist($image);

                dump('test');
            } elseif ($imageExists) {
                $image->setName($fileName);
                $image->setAlt($alt);
                dump($image);
                $book->setImage($image);
                $this->getDoctrine()->getManager()->persist($image);
            } else {
                $book->setImage(null);
            }

            $this->getDoctrine()->getManager()->persist($book);
            $this->getDoctrine()->getManager()->flush();

            $this->addFlash(
                'success',
                'Le modifications ont bien été enregistrées'
            );

            return $this->redirectToRoute('book_show', ['id' => $book->getId()]);
        }


        return $this->render('book/edit.html.twig', [
            'book' => $book,
            'form' => $form->createView(),
            'categories' => $this->categoryRepository->findAll()
        ]);
    }

    /**
     * @Route("/book/{id}", name="book_delete", methods="DELETE")
     */
    public function delete(Request $request, Book $book): Response
    {
        if ($this->isCsrfTokenValid('delete'.$book->getId(), $request->request->get('_token'))) {

            if($book->getAvailability() !== 1) {
                $this->addFlash(
                    'error',
                    'Le livre ne peut pas être supprimé tant qu\'il est emprunté par un utilisateur'
                );

                return $this->render('book/show.html.twig', [
                    'book' => $book,
                    'users' => $this->userRepository->findAll()
                ]);

            }
            $em = $this->getDoctrine()->getManager();
            $em->remove($book);
            if ($book->getImage()) {
                unlink($this->getParameter('images_directory') . '/' . $book->getImage()->getName());
                $em->remove($book->getImage());
            }
            $em->flush();


            $this->addFlash(
                'success',
                'Le livre a bien été supprimé'
            );
        }


        return $this->redirectToRoute('book_index');
    }

    /**
     * @Route("/book/borrow/{id}", name="book_borrow", methods="POST")
     */
    public function borrowBook(Request $request, Book $book): Response
    {
        $id = $request->request->get('user_id');
        $user = $this->userRepository->findOneById($id);

        if ($user->getNbBook() < 3) {
            $em = $this->getDoctrine()->getManager();

            $user->borrowBook();
            $book->borrowBook($user);
            // $book->setUser($user);
            // $book->setAvailability(0);
            $em->persist($book);
            // $em->persist($user);
            $em->flush();

            $this->addFlash(
                'success',
                'Le livre a bien été emprunté par ' . $user->getFirstname()
            );
        } else {
            $this->addFlash(
                'error',
                'L\'utilisateur ' . $user->getFirstname() . ' ne peut pas emprunter plus de 3 livres.'
            );
        }


        return $this->redirectToRoute('book_show', [
            'id' => $book->getId()
        ]);


    }

    /**
     * @Route("/book/return/{id}", name="book_return", methods="POST")
     */
    public function returnBook(Request $request, Book $book) : Response
    {
        $em = $this->getDoctrine()->getManager();

        $user = $book->getUser();
        $user->returnBook();
        $book->returnBook();
        // $book->setUser(NULL);
        // $book->setAvailability(1);
        $em->persist($book);
        // $em->persist($user);
        $em->flush();

        $this->addFlash(
            'success',
            'Le livre a bien été restitué'
        );

        return $this->redirectToRoute('book_show', [
            'id' => $book->getId()
        ]);
    }
}
